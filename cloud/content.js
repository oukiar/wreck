//THIS SECTION GENERATES THE CONTENT FOR WRECK THE MEDIA//IT ALSO HANDLES CONTENT LIKE FOLLOW INTERESTS OR UPLOAD POSTS.//ALL RIGHTS RESERVED TO NEURONS ART & TECHNOLOGY//SUI GENERIS.//CHEERS.var Post = Parse.Object.extend("Post");var Interests = Parse.Object.extend("Interests");var Image = require("parse-image");//RECIVES THE NEW POST AND STORES IT (POST METHOD)exports.newPost = function(req, res){	//Form input data into variables	var postCategory = req.body.post_category;	var postTitle = req.body.post_title;	var postContent = req.body.post_content;	var postTags = req.body.post_tags;	var username = Parse.User.current().get("username");    var userId = Parse.User.current().id;   //Create Post Object Post class and post is the new instance of the class    var Post = Parse.Object.extend("Post");    var post = new Post();		// create ACL	var acl = new Parse.ACL();	// public cannot read data	acl.setPublicReadAccess(true);	// public cannot write data	acl.setPublicWriteAccess(false);	// user can write data	acl.setWriteAccess( Parse.User.current(), true );	// save ACL to object	post.setACL( acl );	post.set("userPointer", Parse.User.current());	  post.save({    category: postCategory,    title: postTitle,	postContent: postContent,    postTags: postTags,	username: username,	  userId: userId  }, {    success: function(post) {		res.redirect("/profile");    },    error: function(post, error) {      // The save failed.      // error is a Parse.Error with an error code and message.    }  }); }//Edit Profileexports.editProfile = function(req, res){	var profileName = req.body.profileName;	var profileWebsite = req.body.profileWebsite;	var profileBio = req.body.profileBio;	var usrname = Parse.User.current().get("username");    var Profile = Parse.Object.extend("Profile");    var queryProfile = new Parse.Query(Profile);	queryProfile.equalTo("username", usrname);    queryProfile.first({  	  success: function(pUser) {		  		  if(profileName == "" || profileName == null){			  profileName = pUser.get("name");		  }		  		  if(profileWebsite == "" || profileWebsite == null){			  profileWebsite = "No website added.";		  }		  		  if(profileBio == "" || profileBio == null){			  profileBio = "No bio added...";		  }			  pUser.set("name", profileName);		  pUser.set("website", profileWebsite);		  pUser.set("bio", profileBio);		  pUser.save();		  res.redirect('/profile');	  }        });		}// DISPLAYS TO THE CURRENT USER PROFILEexports.posts = function(req, res) {if (!Parse.User.current()) {      res.redirect('/'); }else{  var queryPost = new Parse.Query("Post");  var usrname = Parse.User.current().get("username");  queryPost.equalTo("username", usrname);  queryPost.descending('createdAt');  queryPost.find().then(function(results) {  usrInterests = Parse.User.current().get("Interests");  queryUserInterests = new Parse.Query("Interests");  queryUserInterests.containedIn("objectId", usrInterests);  queryUserInterests.find().then(function(interests){	  Profile= Parse.Object.extend("Profile");	  queryProfile = new Parse.Query(Profile);	  queryProfile.equalTo("username", usrname);	  queryProfile.first({	  success: function(display) {		  res.render('profile.ejs', { 		   posts: results,		   interests: interests,			  usr: display		    });		}		});});});};};//DISPLAYS USER'S PROFILE YOU ARE VISITINGexports.usrP = function(req, res) {if (!Parse.User.current()) {      res.redirect('/'); }else{  var queryPost = new Parse.Query("Post");  var usrId = Parse.User.current().id;  var username = req.params;  var userHost = username.toString();  var userFinal = userHost.slice(1);  queryPost.equalTo("username", userFinal);  queryPost.descending('createdAt');  queryPost.find().then(function(results) {  var Profile = Parse.Object.extend("Profile");  queryUsr = new Parse.Query(Profile);  queryUsr.equalTo("username", userFinal);  queryUsr.first({	  success: function(object) {      res.render('usrs.ejs', {   		posts: results,  		user: object,  		userme: userFinal      });  }  });});}}; // ALL INTERESTS SECTION.//FOLLOW INTERESTSParse.Cloud.define("myGod", function(request, response) {	Parse.Cloud.useMasterKey();  var queryInterest = new Parse.Query("Interests");  queryInterest.equalTo("objectId", request.params.interestId);  queryInterest.first().then(function(results) {    results.increment("Followers");    results.add("Users", request.params.follower);	results.save();    var queryUser = new Parse.Query(Parse.User);    queryUser.equalTo("objectId", request.params.follower);    return queryUser.first();  }).then(function(results) {    results.add("Interests", request.params.interestId);    results.save();    response.success("works");  }, function(error) {    response.error("doesnt Works");  });});//UNFOLLOW INTERESTSParse.Cloud.define("myDevil", function(request, response) {	Parse.Cloud.useMasterKey();	  var queryUnInterest = new Parse.Query("Interests");  queryUnInterest.equalTo("objectId", request.params.interestId);  queryUnInterest.first().then(function(results) {    results.increment("Followers", -1);    results.remove("Users", request.params.follower);	results.save();    var queryUser = new Parse.Query(Parse.User);    queryUser.equalTo("objectId", request.params.follower);    return queryUser.first();  }).then(function(results) {    results.remove("Interests", request.params.interestId);    results.save();    response.success("works");  }, function(error) {    response.error("doesnt Works");  });});// DISPLAY INTEREST FOR THE CURRENT USERexports.interests = function(req, res) {	if (!Parse.User.current()) {	      res.redirect('/');	 }else{	     var interests = Parse.User.current().get("Interests");	     var queryInterests = new Parse.Query("Interests");	     queryInterests.notContainedIn("objectId", interests);	     queryInterests.ascending('Group');	     queryInterests.find().then(function(results) {	       res.render('interests.ejs', { 	   		interests: results,			   following: "Follow"	       });	     },	     function() {	       res.send(500, 'Failed loading interests!');	     });	   }};//Display Interest (User interests / My interests)exports.myinterests =  function(req, res) {if (!Parse.User.current()) {      res.redirect('/'); }else{  var myinterests = Parse.User.current().get("Interests");  var querymyInterests = new Parse.Query("Interests");  querymyInterests.containedIn("objectId", myinterests);  querymyInterests.ascending('createdAt');  querymyInterests.find().then(function(results) {    res.render('myinterests.ejs', { 		interests: results,		following: "Unfollow"    });  },  function() {    res.send(500, 'Failed loading interests!');  });}};//END OF INTEREST SECTION START OF FAVORITES//Choose Favorites PostsParse.Cloud.define("favorite", function(request, response) {		Parse.Cloud.useMasterKey();   var userQuery = new Parse.Query(Parse.User);  var  favoriteId = request.params.favoriteId;  var followerId = request.params.followerId;  userQuery.get(followerId,{    success: function(results) {		results.add("Favorites", favoriteId);		results.save();	  response.success();    },    error: function() {      response.error("Follow interest failed!");    }  }); });//Display Favoritesexports.favorites =  function(req, res) {if (!Parse.User.current()) {      res.redirect('/'); }else{  var favorites = Parse.User.current().get("Favorites");  var queryFavorites = new Parse.Query("Post");  queryFavorites.containedIn("objectId", favorites);  queryFavorites.descending('createdAt');  queryFavorites.find().then(function(results) {    res.render('favorites.ejs', {       posts: results    });  },  function() {    res.send(500, 'Failed loading posts');  });}};